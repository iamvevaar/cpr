// export const cropImage = (
//   image: any,
//   handleCroppedImages: (croppedImages: string[]) => void
// ) => {
//   const canvas = document.createElement("canvas");
//   const ctx = canvas.getContext("2d");

//   const img = new Image();
//   img.src = image;

//   const watermark = new Image();
//   watermark.src =
//     "data:image/svg+xml;base64," +
//     btoa(`
        

   
// <svg width="50" height="40" viewBox="0 0 50 40" fill="none" xmlns="http://www.w3.org/2000/svg">
// <g clip-path="url(#clip0_807_2)">
// <path d="M27.1303 5.07205L17.9141 28H13.5533L4.33718 5.07205H8.31585C8.69049 5.07205 8.99769 5.16946 9.23746 5.36427C9.49222 5.5441 9.65706 5.76139 9.73199 6.01614L14.8121 19.3683C15.0219 19.9977 15.2092 20.6196 15.3741 21.234C15.5389 21.8484 15.6813 22.4703 15.8012 23.0997C15.921 22.4703 16.0634 21.8559 16.2282 21.2565C16.4081 20.6421 16.6029 20.0127 16.8127 19.3683L21.9827 6.01614C22.0726 5.7464 22.2375 5.52162 22.4772 5.34179C22.717 5.16196 23.0092 5.07205 23.3539 5.07205H27.1303Z" fill="#4844FF"/>
// <path d="M21.6335 28.8201L31.0314 5.43994H35.4782L44.8761 28.8201H40.819C40.437 28.8201 40.1237 28.7208 39.8792 28.5221C39.6194 28.3388 39.4513 28.1172 39.3749 27.8574L34.1946 14.2419C33.9807 13.6001 33.7897 12.9659 33.6216 12.3394C33.4535 11.7129 33.3083 11.0787 33.1861 10.4369C33.0638 11.0787 32.9186 11.7052 32.7505 12.3165C32.5672 12.943 32.3685 13.5848 32.1546 14.2419L26.8826 27.8574C26.7909 28.1325 26.6228 28.3617 26.3783 28.5451C26.1338 28.7284 25.8358 28.8201 25.4843 28.8201L21.6335 28.8201Z" fill="#4844FF"/>
// <path d="M14.9734 30.0441L12.5583 36H11.5266L9.11138 30.0441H10.0552C10.1451 30.0441 10.2193 30.0656 10.2779 30.1086C10.3366 30.1516 10.3756 30.2063 10.3952 30.2728L11.8197 33.9307C11.8705 34.0831 11.9134 34.2355 11.9486 34.3879C11.9877 34.5364 12.0229 34.6849 12.0541 34.8334C12.0854 34.6849 12.1206 34.5364 12.1597 34.3879C12.1987 34.2394 12.2456 34.087 12.3003 33.9307L13.7424 30.2728C13.7659 30.2063 13.8069 30.1516 13.8655 30.1086C13.9241 30.0656 13.9945 30.0441 14.0766 30.0441H14.9734ZM19.6561 32.3597C19.6561 32.133 19.6229 31.9239 19.5565 31.7324C19.494 31.5409 19.4002 31.3748 19.2751 31.2341C19.1501 31.0934 18.9976 30.984 18.8179 30.9059C18.6381 30.8277 18.431 30.7886 18.1965 30.7886C17.7158 30.7886 17.3367 30.9274 17.0592 31.2048C16.7857 31.4823 16.6118 31.8672 16.5375 32.3597H19.6561ZM20.5999 35.15C20.4592 35.3141 20.2971 35.4568 20.1134 35.5779C19.9297 35.6952 19.7343 35.7909 19.5272 35.8652C19.3201 35.9394 19.1051 35.9941 18.8823 36.0293C18.6635 36.0645 18.4466 36.0821 18.2317 36.0821C17.8213 36.0821 17.4403 36.0137 17.0886 35.8769C16.7407 35.7362 16.4379 35.533 16.1799 35.2672C15.9259 34.9976 15.7266 34.6654 15.582 34.2707C15.4413 33.8721 15.371 33.4148 15.371 32.899C15.371 32.4847 15.4355 32.0998 15.5644 31.7441C15.6934 31.3846 15.8771 31.072 16.1155 30.8062C16.3578 30.5405 16.6528 30.3314 17.0006 30.179C17.3484 30.0266 17.7392 29.9503 18.173 29.9503C18.5365 29.9503 18.8706 30.0109 19.1755 30.1321C19.4842 30.2493 19.7499 30.4213 19.9727 30.6479C20.1955 30.8746 20.3694 31.154 20.4944 31.4862C20.6234 31.8184 20.6879 32.1975 20.6879 32.6234C20.6879 32.7993 20.6683 32.9185 20.6292 32.981C20.5902 33.0397 20.5179 33.069 20.4123 33.069H16.5082C16.5199 33.4246 16.5707 33.7353 16.6606 34.001C16.7505 34.2629 16.8736 34.4817 17.0299 34.6576C17.1902 34.8334 17.3797 34.9644 17.5986 35.0503C17.8174 35.1363 18.0617 35.1793 18.3313 35.1793C18.5853 35.1793 18.8042 35.15 18.9879 35.0914C19.1755 35.0328 19.3357 34.9702 19.4686 34.9038C19.6053 34.8334 19.7187 34.769 19.8086 34.7103C19.9023 34.6517 19.9844 34.6224 20.0548 34.6224C20.1486 34.6224 20.2209 34.6576 20.2717 34.7279L20.5999 35.15ZM26.9495 30.0441L24.5343 36H23.5026L21.0874 30.0441H22.0312C22.1211 30.0441 22.1953 30.0656 22.254 30.1086C22.3126 30.1516 22.3517 30.2063 22.3712 30.2728L23.7957 33.9307C23.8465 34.0831 23.8895 34.2355 23.9246 34.3879C23.9637 34.5364 23.9989 34.6849 24.0302 34.8334C24.0614 34.6849 24.0966 34.5364 24.1357 34.3879C24.1748 34.2394 24.2217 34.087 24.2764 33.9307L25.7184 30.2728C25.7419 30.2063 25.7829 30.1516 25.8415 30.1086C25.9002 30.0656 25.9705 30.0441 26.0526 30.0441H26.9495ZM30.922 33.3562C30.457 33.3718 30.0623 33.409 29.7379 33.4676C29.4135 33.5223 29.1497 33.5966 28.9465 33.6903C28.7433 33.7841 28.5967 33.8955 28.5069 34.0245C28.417 34.1495 28.372 34.2902 28.372 34.4466C28.372 34.5951 28.3955 34.724 28.4424 34.8334C28.4932 34.939 28.5596 35.0269 28.6417 35.0972C28.7277 35.1637 28.8273 35.2125 28.9407 35.2438C29.054 35.2751 29.1771 35.2907 29.31 35.2907C29.4858 35.2907 29.6461 35.2731 29.7907 35.2379C29.9392 35.2028 30.0779 35.1539 30.2069 35.0914C30.3358 35.0249 30.4589 34.9448 30.5762 34.851C30.6934 34.7572 30.8087 34.6498 30.922 34.5286V33.3562ZM27.5689 30.8766C27.9011 30.56 28.2607 30.3236 28.6476 30.1672C29.0384 30.0109 29.4663 29.9328 29.9313 29.9328C30.2713 29.9328 30.5723 29.9894 30.8341 30.1028C31.0959 30.2122 31.3167 30.3666 31.4965 30.5659C31.6763 30.7652 31.8111 31.0036 31.901 31.281C31.9948 31.5585 32.0417 31.8653 32.0417 32.2014V36H31.5317C31.4184 36 31.3324 35.9824 31.2738 35.9472C31.2151 35.9082 31.1682 35.8378 31.1331 35.7362L31.01 35.2145C30.8576 35.3552 30.7071 35.4802 30.5586 35.5897C30.4101 35.6952 30.2538 35.787 30.0896 35.8652C29.9294 35.9394 29.7574 35.9961 29.5738 36.0352C29.3901 36.0743 29.1869 36.0938 28.9641 36.0938C28.7296 36.0938 28.5088 36.0625 28.3017 36C28.0985 35.9336 27.9207 35.8339 27.7682 35.701C27.6158 35.5682 27.4947 35.4021 27.4048 35.2028C27.3188 35.0034 27.2758 34.7709 27.2758 34.5052C27.2758 34.2707 27.3384 34.046 27.4634 33.831C27.5924 33.6122 27.7995 33.4168 28.0848 33.2448C28.374 33.0729 28.7492 32.9322 29.2103 32.8228C29.6754 32.7133 30.2459 32.6508 30.922 32.6352V32.2014C30.922 31.752 30.8263 31.4159 30.6348 31.1931C30.4433 30.9703 30.1619 30.859 29.7907 30.859C29.5405 30.859 29.3295 30.8902 29.1576 30.9528C28.9895 31.0153 28.843 31.0856 28.7179 31.1638C28.5967 31.238 28.4893 31.3064 28.3955 31.369C28.3056 31.4315 28.2118 31.4628 28.1141 31.4628C28.0359 31.4628 27.9676 31.4413 27.9089 31.3983C27.8542 31.3553 27.8093 31.3045 27.7741 31.2459L27.5689 30.8766ZM36.7727 33.3562C36.3076 33.3718 35.9129 33.409 35.5885 33.4676C35.2641 33.5223 35.0004 33.5966 34.7971 33.6903C34.5939 33.7841 34.4474 33.8955 34.3575 34.0245C34.2676 34.1495 34.2227 34.2902 34.2227 34.4466C34.2227 34.5951 34.2461 34.724 34.293 34.8334C34.3438 34.939 34.4102 35.0269 34.4923 35.0972C34.5783 35.1637 34.6779 35.2125 34.7913 35.2438C34.9046 35.2751 35.0277 35.2907 35.1606 35.2907C35.3364 35.2907 35.4967 35.2731 35.6413 35.2379C35.7898 35.2028 35.9285 35.1539 36.0575 35.0914C36.1864 35.0249 36.3095 34.9448 36.4268 34.851C36.544 34.7572 36.6593 34.6498 36.7727 34.5286V33.3562ZM33.4195 30.8766C33.7517 30.56 34.1113 30.3236 34.4982 30.1672C34.889 30.0109 35.3169 29.9328 35.782 29.9328C36.122 29.9328 36.4229 29.9894 36.6847 30.1028C36.9466 30.2122 37.1674 30.3666 37.3471 30.5659C37.5269 30.7652 37.6617 31.0036 37.7516 31.281C37.8454 31.5585 37.8923 31.8653 37.8923 32.2014V36H37.3823C37.269 36 37.183 35.9824 37.1244 35.9472C37.0658 35.9082 37.0189 35.8378 36.9837 35.7362L36.8606 35.2145C36.7082 35.3552 36.5577 35.4802 36.4092 35.5897C36.2607 35.6952 36.1044 35.787 35.9402 35.8652C35.78 35.9394 35.6081 35.9961 35.4244 36.0352C35.2407 36.0743 35.0375 36.0938 34.8147 36.0938C34.5802 36.0938 34.3594 36.0625 34.1523 36C33.9491 35.9336 33.7713 35.8339 33.6189 35.701C33.4664 35.5682 33.3453 35.4021 33.2554 35.2028C33.1694 35.0034 33.1264 34.7709 33.1264 34.5052C33.1264 34.2707 33.189 34.046 33.314 33.831C33.443 33.6122 33.6501 33.4168 33.9354 33.2448C34.2246 33.0729 34.5998 32.9322 35.0609 32.8228C35.526 32.7133 36.0966 32.6508 36.7727 32.6352V32.2014C36.7727 31.752 36.6769 31.4159 36.4854 31.1931C36.2939 30.9703 36.0125 30.859 35.6413 30.859C35.3912 30.859 35.1801 30.8902 35.0082 30.9528C34.8401 31.0153 34.6936 31.0856 34.5685 31.1638C34.4474 31.238 34.3399 31.3064 34.2461 31.369C34.1562 31.4315 34.0624 31.4628 33.9647 31.4628C33.8866 31.4628 33.8182 31.4413 33.7595 31.3983C33.7048 31.3553 33.6599 31.3045 33.6247 31.2459L33.4195 30.8766ZM40.5012 31.1872C40.6927 30.7964 40.9233 30.4897 41.1929 30.2669C41.4626 30.0441 41.7869 29.9328 42.166 29.9328C42.295 29.9328 42.4161 29.9484 42.5295 29.9797C42.6467 30.007 42.7483 30.05 42.8343 30.1086L42.7581 30.9703C42.7307 31.0759 42.6663 31.1286 42.5647 31.1286C42.5099 31.1286 42.4279 31.1189 42.3184 31.0993C42.209 31.0759 42.0918 31.0641 41.9667 31.0641C41.783 31.0641 41.6209 31.0915 41.4802 31.1462C41.3395 31.197 41.2125 31.2752 41.0991 31.3807C40.9897 31.4823 40.892 31.6093 40.806 31.7617C40.7201 31.9102 40.6399 32.0802 40.5657 32.2717V36H39.4226V30.0441H40.0791C40.2042 30.0441 40.2882 30.0676 40.3312 30.1145C40.3781 30.1575 40.4113 30.2356 40.4309 30.349L40.5012 31.1872Z" fill="black"/>
// </g>
// <defs>
// <clipPath id="clip0_807_2">
// <rect width="50" height="40" fill="white"/>
// </clipPath>
// </defs>
// </svg>

//     `);

//   img.onload = () => {
//     const halfWidth = img.width / 2;
//     canvas.width = halfWidth;
//     canvas.height = img.height;

//     // Crop left half
//     ctx!.drawImage(
//       img,
//       0,
//       0,
//       halfWidth,
//       img.height,
//       0,
//       0,
//       halfWidth,
//       img.height
//     );
//     addWatermark(ctx!, watermark, "left"); // Add watermark on left
//     const leftHalf = canvas.toDataURL();

//     // Crop right half
//     ctx!.clearRect(0, 0, canvas.width, canvas.height);
//     ctx!.drawImage(
//       img,
//       halfWidth,
//       0,
//       halfWidth,
//       img.height,
//       0,
//       0,
//       halfWidth,
//       img.height
//     );
//     addWatermark(ctx!, watermark, "right"); // Add watermark on right
//     const rightHalf = canvas.toDataURL();

//     // Call the callback function with cropped images
//     handleCroppedImages([leftHalf, rightHalf]);
//   };
// };

// function addWatermark(
//   ctx: CanvasRenderingContext2D,
//   watermark: HTMLImageElement,
//   position: "left" | "right"
// ) {
//   const watermarkWidth = 100; // Adjust according to your watermark size
//   const watermarkHeight = 50; // Adjust according to your watermark size
//   const canvasWidth = ctx.canvas.width;
//   const canvasHeight = ctx.canvas.height;

//   let x, y;

//   if (position === "left") {
//     x = 10;
//   } else {
//     x = canvasWidth - watermarkWidth - 10;
//   }

//   y = canvasHeight - watermarkHeight - 10;

//   ctx.drawImage(watermark, x, y, watermarkWidth, watermarkHeight);
// }


export const cropImage = (image:any, numberOfPieces: number, handleCroppedImages: (croppedImages: string[]) => void) => {
  const canvas = document.createElement('canvas');
  const ctx = canvas.getContext('2d');

  const img = new Image();
  img.src = image;

  img.onload = () => {
    const pieceWidth = img.width / numberOfPieces;
    canvas.width = pieceWidth;
    canvas.height = img.height;

    const croppedImages = [];

    for (let i = 0; i < numberOfPieces; i++) {
      // Calculate the starting position for each piece
      const startX = i * pieceWidth;

      // Crop the piece
      ctx!.drawImage(img, startX, 0, pieceWidth, img.height, 0, 0, pieceWidth, img.height);
      const croppedPiece = canvas.toDataURL();

      // Push the cropped piece into the array
      croppedImages.push(croppedPiece);

      // Clear the canvas for the next iteration
      ctx!.clearRect(0, 0, canvas.width, canvas.height);
    }

    // Call the callback function with cropped images
    handleCroppedImages(croppedImages);
  };
};
